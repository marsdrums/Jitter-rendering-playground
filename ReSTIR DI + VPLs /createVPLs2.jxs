<jittershader name="fill-flat-quads">
	<description>Default Shader </description>
	<param name="pos" type="vec3" state="POSITION" />
	<param name="uv" type="vec2" state="TEXCOORD" />
	<param name="objTex" type="int" default="0" />
	<param name="stbnTex" type="int" default="1" />
	<param name="VPLposTex" type="int" default="2" />
	<param name="VPLcolTex" type="int" default="3" />
	<param name="VPLnorTex" type="int" default="4" />
	<param name="num_lights" type="float" default="40" />
	<param name="objNum" type="vec2" state="TEXDIM0" />
	<language name="glsl" version="1.5">
		<bind param="pos" program="vp" />
		<bind param="uv" program="vp" />
		<bind param="objTex" program="vp" />
		<bind param="stbnTex" program="fp" />
		<bind param="VPLposTex" program="fp" />
		<bind param="VPLcolTex" program="fp" />
		<bind param="VPLnorlTex" program="fp" />
		<bind param="num_lights" program="vp" />
		<bind param="objNum" program="vp" />
		<program name="vp" type="vertex">

<![CDATA[
#version 330 core
in vec3 pos, ligPos, ligCol;
in vec2 uv;
uniform sampler2DRect stbnTex, objTex, VPLposTex, VPLcolTex, VPLnorTex;
uniform float num_lights;
uniform vec2 objNum;

out jit_PerVertex {
	flat int valid;
	flat vec3 VPLpos;	
	flat vec3 VPLcol;
	flat vec3 VPLnor;
} jit_out;


struct rayInfo{
	vec3 o;
	vec3 d;
	vec3 invd;
	vec3 invdtimeso;
	vec3 absinvd;
};

struct hitInfo{
	float tn; //enter distance
	float tf; //exit distance
	vec3 t1;
	vec3 t2;
	vec3 n; //normal
	vec3 p; //position
	vec3 c; //color
	mat4 txi;
	vec3 rdd;
	vec3 roo;
};

struct objInfo{
	vec3 p; //position
	vec3 s; //scale
	vec4 r; //rotation
	vec3 c; //color
	mat4 txx; 
	mat4 txi;
};

struct bestInfo{
	float tn; //enter distance
	float tf; //exit distance
	vec3 t1;
	vec3 t2;
	vec3 n; //normal
	vec3 p; //position
	vec3 c; //color
	float i;
	mat4 txi;
	vec3 rdd;
	vec3 roo;
};


#define PI 3.14159265359
#define TWOPI 6.28318530718 
#define FAR 100000

void get_ray_info(out rayInfo ray){
	ray.o = texture(VPLposTex, uv).xyz;
	//ray.d = texture( stbnTex, vec2(uv.x, mod(float(gl_InstanceID), 128)) ).rgb;
	ray.d = texture( stbnTex, vec2(uv.x, mod(uv.y + 64, 128)) ).rgb;
	vec3 VPLnor = texture(VPLnorTex, uv).xyz;
	ray.d = normalize(ray.d + VPLnor);
	ray.invd = 1 / ray.d;
	ray.absinvd = abs(ray.invd);
	ray.invdtimeso = ray.invd * ray.o;	
}

void get_ray_info_shifted(out rayInfo ray){
	ray.o = texture(VPLposTex, uv+vec2(1,0)).xyz;
	//ray.d = texture( stbnTex, vec2(uv.x, mod(float(gl_InstanceID), 128)) ).rgb;
	ray.d = texture( stbnTex, vec2(uv.x+1, mod(uv.y + 64 + 4, 128)) ).rgb;
	vec3 VPLnor = texture(VPLnorTex, uv+vec2(1,0)).xyz;
	ray.d = normalize(ray.d + VPLnor);
	ray.invd = 1 / ray.d;
	ray.absinvd = abs(ray.invd);
	ray.invdtimeso = ray.invd * ray.o;	
}

uint wang_hash(inout uint seed){

    seed = uint(seed ^ uint(61)) ^ uint(seed >> uint(16));
    seed *= uint(9);
    seed = seed ^ (seed >> 4);
    seed *= uint(0x27d4eb2d);
    seed = seed ^ (seed >> 15);
    return seed;
}
 
float RandomFloat01(inout uint seed) { 
	return float(wang_hash(seed)) / 4294967296.0; 
}

vec2 RandomVec201(inout uint seed) { 
	return vec2( 	RandomFloat01(seed),
					RandomFloat01(seed)); 
}

vec3 RandomVec301(inout uint seed) { 
	return vec3( 	RandomFloat01(seed),
					RandomFloat01(seed),
					RandomFloat01(seed)); 
}

vec4 RandomVec401(inout uint seed) { 
	return vec4( 	RandomFloat01(seed),
					RandomFloat01(seed),
					RandomFloat01(seed),
					RandomFloat01(seed)); 
}

vec2 randomUnitVector2(inout uint seed){

    float a = RandomFloat01(seed) * TWOPI;
    return vec2( cos(a), sin(a) );
}

vec3 randomUnitVector3(inout uint seed){

    float z = RandomFloat01(seed) * 2.0f - 1.0f;
    float a = RandomFloat01(seed) * TWOPI;
    float r = sqrt(1.0f - z * z);
    float x = r * cos(a);
    float y = r * sin(a);
    return vec3(x, y, z);
}

mat4 rotationAxisAngle( vec3 v, float angle )
{
    float s = sin( angle );
    float c = cos( angle );
    float ic = 1.0 - c;

    return mat4( v.x*v.x*ic + c,     v.y*v.x*ic - s*v.z, v.z*v.x*ic + s*v.y, 0.0,
                 v.x*v.y*ic + s*v.z, v.y*v.y*ic + c,     v.z*v.y*ic - s*v.x, 0.0,
                 v.x*v.z*ic - s*v.y, v.y*v.z*ic + s*v.x, v.z*v.z*ic + c,     0.0,
			     0.0,                0.0,                0.0,                1.0 );
}

mat4 translate( float x, float y, float z )
{
    return mat4( 1.0, 0.0, 0.0, 0.0,
				 0.0, 1.0, 0.0, 0.0,
				 0.0, 0.0, 1.0, 0.0,
				 x,   y,   z,   1.0 );
}


// axis aligned box centered at the origin, with size boxSize
bool box_intersection( in rayInfo ray, out hitInfo hit, in objInfo obj ) {
    //vec3 n = ray.invd*ray.o;   // can precompute if traversing a set of aligned boxes
    // convert from ray to box space
	hit.rdd = (obj.txx*vec4(ray.d,0.0)).xyz;
	hit.roo = (obj.txx*vec4(ray.o,1.0)).xyz;

	// ray-box intersection in box space
    vec3 m = 1.0/hit.rdd;
    vec3 n = m*hit.roo;
    vec3 k = abs(m)*obj.s;
    hit.t1 = -n - k;
    hit.t2 = -n + k;
    hit.tn = max( max( hit.t1.x, hit.t1.y ), hit.t1.z );
    hit.tf = min( min( hit.t2.x, hit.t2.y ), hit.t2.z );
    hit.txi = obj.txi; //this could be better
    return (hit.tn <= hit.tf) && (hit.tf >= 0.0);
    //if( hit.tn > hit.tf || hit.tf < 0.0) return false; // no intersection
    //return true;
}

void get_obj_info(out objInfo obj, in float i){
	obj.p = texture(objTex, vec2(i, 0.5)).xyz;
	obj.r = texture(objTex, vec2(i, 1.5));
	obj.s = texture(objTex, vec2(i, 2.5)).xyz;

    // rotate and translate box	
	mat4 rot = rotationAxisAngle( normalize(obj.r.xyz), obj.r.w );
	mat4 tra = translate( obj.p.x, obj.p.y, obj.p.z );
	obj.txi = tra * rot; 
	obj.txx = inverse( obj.txi );
}


void update_best(inout bestInfo bes, in hitInfo hit, in float i){
	if(bes.tn < hit.tn) return;
	bes.tn = hit.tn;
	bes.tf = hit.tf;
	bes.t1 = hit.t1;
	bes.t2 = hit.t2;
	bes.txi = hit.txi;
	bes.rdd = hit.rdd;
	bes.i = i;
}

void get_normal_position_color(inout bestInfo bes, in rayInfo ray){
	if(bes.tn == FAR){
		jit_out.valid = 0;//bes.c = BACKGROUND;
		return;
	}
	bes.c = texture(objTex, vec2(bes.i, 3.5)).xyz;
	bes.p = ray.o + ray.d*bes.tn; //to avoid landing exactly on the surface
    bes.n = (bes.tn > 0.0) ?	step(vec3(bes.tn),bes.t1) : // ro ouside the box
                           		step(bes.t2,vec3(bes.tf));  // ro inside the box
    bes.n = (bes.txi * vec4(-sign(bes.rdd)*bes.n,0.0)).xyz;
    bes.p += bes.n * 0.01;
    //bes.n *= -sign(ray.d);
}

void ray_trace(in rayInfo ray, inout hitInfo hit, out bestInfo bes){

	objInfo obj;

	bes.tn = FAR;
	for(float i = objNum.x-0.5; i >= 0.0; i-=1.0){
		get_obj_info(obj, i);
		if(box_intersection(ray, hit, obj)) update_best(bes, hit, i);
	}
	get_normal_position_color(bes, ray);

}


void main() {	

	gl_Position = vec4(	pos.xy, 0, 1);
	jit_out.valid = 0;

	vec3 VPLcol = texture(VPLcolTex, uv).rgb;

	if(VPLcol.r + VPLcol.g + VPLcol.b > 0.0){

		rayInfo ray;
		hitInfo hit;
		bestInfo bes;

		jit_out.valid = 1;

		get_ray_info(ray);
		ray_trace(ray, hit, bes);

		jit_out.VPLpos = bes.p;
		jit_out.VPLcol = VPLcol * bes.c * max(0, dot(ray.d, -bes.n));
		jit_out.VPLnor = bes.n;	

	} else {

		VPLcol = texture(VPLcolTex, uv + vec2(1,0)).rgb;

		rayInfo ray;
		hitInfo hit;
		bestInfo bes;

		jit_out.valid = 1;

		get_ray_info_shifted(ray);
		ray_trace(ray, hit, bes);

		jit_out.VPLpos = bes.p;
		jit_out.VPLcol = VPLcol * bes.c * max(0, dot(ray.d, -bes.n));
		jit_out.VPLnor = bes.n;	

	}

}
]]>
		</program>
		<program name="fp" type="fragment">
<![CDATA[
#version 330 core

in jit_PerVertex {
	flat int valid;
	flat vec3 VPLpos;	
	flat vec3 VPLcol;
	flat vec3 VPLnor;
} jit_in;

out vec4 color[3];


void main() {

	if(jit_in.valid == 0) discard;
	color[0] = vec4(jit_in.VPLpos,1);
	color[1] = vec4(jit_in.VPLcol,1);
	color[2] = vec4(jit_in.VPLnor,1);

}	
]]>
		</program>
	</language>
</jittershader>
