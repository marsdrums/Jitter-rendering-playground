<jittershader name="default">
	<description>Default Slab </description>
	<param name="dummyTex" type="int" default="0" />
	<param name="reservoirTex" type="int" default="1" filter="nearest" />
	<param name="colTex" type="int" default="2" filter="nearest" />
	<param name="norDepthTex" type="int" default="3" filter="nearest" />
	<param name="velTex" type="int" default="4" filter="nearest" />
	<param name="posTex" type="int" default="5" filter="nearest" />
	<param name="albTex" type="int" default="6" filter="nearest" />	
	<param name="texDim" type="vec2" state="TEXDIM1" />
	<param name="prevMVP" type="mat4" state="PREV_MODELVIEW_PROJECTION_MATRIX" />
	<param name="farClip" type="float" state="FAR_CLIP" />

	<param name="MVP" type="mat4" state="MODELVIEW_PROJECTION_MATRIX" />
	<param name="MV" type="mat4" state="MODELVIEW_MATRIX" />
	<param name="invV" type="mat4" state="VIEW_MATRIX" transform="INVERSE" />
	<param name="V" type="mat4" state="VIEW_MATRIX" />
	<param name="VP" type="mat4" state="VIEW_PROJECTION_MATRIX" transform="INVERSE" />
	<param name="textureMatrix0" type="mat4" state="TEXTURE1_MATRIX" />
	<param name="projmat" type="mat4" state="CAM_PROJECTION_MATRIX" />
	<param name="pos" type="vec3" state="POSITION" />
	<param name="uv" type="vec2" state="TEXCOORD" />
	<param name="frame" type="int" state="FRAME" />
	<param name="farCorner" type="vec3" state="FAR_CORNER" />
	<param name="eye" type="vec3" state="CAMERA_POSITION" />
	<language name="glsl" version="1.5">
		<bind param="dummyTex" program="fp" />
		<bind param="reservoirTex" program="fp" />
		<bind param="colTex" program="fp" />
		<bind param="norDepthTex" program="fp" />
		<bind param="velTex" program="fp" />
		<bind param="texDim" program="fp" />
		<bind param="posTex" program="fp" />
		<bind param="albTex" program="fp" />
		<bind param="prevMVP" program="fp" />
		<bind param="farClip" program="fp" />

		<bind param="MVP" program="vp" />
		<bind param="MVP" program="fp" />
		<bind param="MV" program="fp" />
		<bind param="invV" program="fp" />
		<bind param="V" program="fp" />
		<bind param="VP" program="fp" />
		<bind param="projmat" program="fp" />
		<bind param="textureMatrix0" program="vp" />
		<bind param="textureMatrix0" program="fp" />
		<bind param="pos" program="vp" />
		<bind param="uv" program="vp" />
		<bind param="frame" program="fp" />
		<bind param="farCorner" program="vp" />
		<bind param="eye" program="fp" />

		<include source="noise_functions.glsl" program="fp" />

<program name="vp" type="vertex"  >
<![CDATA[
#version 330 core

in vec3 pos;
in vec2 uv;

out jit_PerVertex {
	smooth vec2 uv;
	smooth vec3 dir;
} jit_out;

uniform mat4 MVP;
uniform mat4 textureMatrix0;
uniform vec3 farCorner;

void main(void) {
	gl_Position = MVP*vec4(pos, 1.);
	jit_out.dir = farCorner * vec3(gl_Position.xy, 1);
	jit_out.uv = vec2(textureMatrix0*vec4(gl_Position.xy*0.5 + 0.5, 0., 1.));
}
]]>
</program>
<program name="fp" type="fragment"  >
<![CDATA[
#version 330 core
#define search_radius 100
#define M_PI 3.141592653589793238462643383279502884

in jit_PerVertex {
	smooth vec2 uv;
	smooth vec3 dir;
} jit_in;

layout (location = 0) out vec4 outColor;

uniform sampler2DRect dummyTex, reservoirTex, colTex, norDepthTex, velTex, posTex, albTex;
uniform int frame;
uniform vec2 texDim;
uniform mat4 prevMVP, invV, MV, MVP, VP, V, projmat, textureMatrix0;
uniform float farClip;
uniform vec3 eye;

struct sample{
	vec3 col;
	vec3 nor;
	vec3 pos;
	float depth;
	float index;
	vec2 uv;
	vec2 vel;
	vec3 alb;
	float id;
};

uint get_rng_seed(){
	return uint(jit_in.uv.x*371783) + uint(jit_in.uv.y*288472) + uint(frame*377112);
}

vec2 get_sample_uv(inout uint seed, in float radius, in int iteration){

	//vec2 uv = mod(jit_in.uv, vec2(128));
	//float i = mod(float(frame*2) + float(iteration), 64);
	//vec2 tile = 128*vec2(mod(i, 8), floor(i/8));
	//vec2 rand = texelFetch(randTex, ivec2(uv + tile)).xy;
	//float angle = rand.x * TWOPI;
	//float ra = sqrt(rand.y)*radius;
	//return vec2(cos(angle), sin(angle))*(ra) + jit_in.uv;

	float angle = RandomFloat01(seed)*TWOPI;
	float ra = sqrt(RandomFloat01(seed))*radius;
	return vec2(cos(angle), sin(angle))*ra + jit_in.uv;
	//vec2 circle = abs(vec2(cos(angle), sin(angle))*ra);
	//vec2 index = mod(floor(jit_in.uv + vec2(frame)), 2)*2 - 1;
	//circle *= index;
	//return circle + jit_in.uv;
}

bool valid_uv(in vec2 uv){
	return uv.x >= 0 && uv.y >= 0 && uv.x < texDim.x && uv.y < texDim.y;
}

void validate_uv(inout vec2 uv){
	uv.x = (uv.x < 0 || uv.x >= texDim.x) ? jit_in.uv.x + -1*(uv.x - jit_in.uv.x) : uv.x;
	uv.y = (uv.y < 0 || uv.y >= texDim.y) ? jit_in.uv.y + -1*(uv.y - jit_in.uv.y) : uv.y;

}

void wrap(inout vec2 uv){
    uv = vec2(	mod(mod(uv.x, texDim.x) + texDim.x, texDim.x),
    			mod(mod(uv.y, texDim.y) + texDim.y, texDim.y));

}

int uv2index(in vec2 uv){
	//uv -= 0.5;
	return int(uv.x + uv.y*texDim.x);
}

vec2 index2uv(in int i){
	return vec2( mod( float(i), texDim.x ), floor( float(i) / texDim.x ) )+0.5;
}

float luminance(vec3 x){
	return dot(x, vec3(0.299, 0.587, 0.114));
}

sample get_sample(int index){

	sample s;
	vec2 uv = index2uv(index);
	ivec2 iuv = ivec2(uv);
	vec4 lookup0 = texelFetch(colTex, iuv);
	vec4 lookup1 = texelFetch(norDepthTex, iuv);
	vec4 lookup2 = texelFetch(velTex, iuv);
	vec4 lookup3 = texelFetch(posTex, iuv);
	vec4 lookup4 = texelFetch(albTex, iuv);
	s.col = lookup0.rgb;
	s.nor = lookup1.xyz;
	s.vel = lookup2.xy;
	s.pos = lookup3.xyz;
	s.depth = lookup1.w;
	s.index = index;
	s.uv = uv;
	s.alb = lookup4.rgb;
	s.id = lookup4.w;
	return s;
}

sample get_sample_pos_col(int index){

	sample s;
	vec2 uv = index2uv(index);
	ivec2 iuv = ivec2(uv);
	vec4 lookup0 = texelFetch(colTex, iuv);
	vec4 lookup3 = texelFetch(posTex, iuv);

	s.col = lookup0.rgb;
	s.pos = lookup3.xyz;
	return s;
}

vec3 get_radiance(in sample this_s, in sample test_s){

	//if( dot(this_s.nor, test_s.nor) > 0.0 ) return vec3(0.0); //they are facing the same direction
	vec3 diff = test_s.pos - this_s.pos;
	//if(dot(diff, this_s.nor) < 0) return vec3(0.0);
	//float dist2 = dot(diff, diff);
	//float dist = sqrt(dist2);
	vec3 dir = normalize(diff);//diff / dist;
	float lambert = max(0.0, dot(this_s.nor, dir));
	//lambert *= max(0.0, dot(dir, -test_s.nor));
	return this_s.alb * lambert * test_s.col;// min it's a hack to reduce fireflies coming from bright reflections; 
																//3* is to compensate for the color dampening it produces
}

bool visible(in sample this_s, in sample test_s, inout uint seed){
	//return true;
	float num_iterations = 5;
	float step = 1 / num_iterations;
	float start = step * (1 + RandomFloat01(seed) - 0.5);
	for(float i = start; i < 1; i += step){ //make a better tracing
		vec2 test_uv = mix(this_s.uv, test_s.uv, vec2(i*i));
		float expected_depth = mix(this_s.depth, test_s.depth, i*i);
		float sampled_depth = texelFetch(norDepthTex, ivec2(test_uv)).w;
		//sampled_depth = sampled_depth == 0 ? 1.0 : sampled_depth;
		//if(sampled_depth < expected_depth-0.01 ) return false;
		if(expected_depth - sampled_depth > 0.01 ) return false;
	}
	return true;
}


ivec2 get_random_uv(inout uint seed, float radius){
	float angle = RandomFloat01(seed)*TWOPI;
	float ra = RandomFloat01(seed)*radius;
	return ivec2(cos(angle)*ra, sin(angle)*ra) + ivec2(jit_in.uv);
}

float saturate(in float x){ return clamp(x, 0, 1); }

void main(void) {

	uint seed = get_rng_seed();
	sample this_s = get_sample(uv2index(floor(jit_in.uv)));
	if(this_s.depth == 1){
		outColor = vec4(0.0);
		return;
	}

	sample test_s;

	vec4 reservoir = texelFetch(reservoirTex, ivec2(jit_in.uv));

	outColor = vec4(0,0,0,1);
/*
	ivec2 randUV = get_random_uv_2(seed, 1);
	vec4 reservoir = texelFetch(reservoirTex, randUV);

	test_s = get_sample(int(reservoir.y));
	//if(this_s.id != test_s.id) continue;
	if(visible(this_s, test_s, seed)){
		vec3 radiance = get_radiance(this_s, test_s);
		float p_hat = luminance(radiance);
		reservoir.w = p_hat > 0 ? (1/max(0.0001, p_hat)) * (reservoir.x / max(reservoir.z, 0.0001)) : 0.0;
		radiance *= reservoir.w;
		outColor += vec4(radiance, 0);
	}
*/
	float radius = mix(60, 30, min(1.0, reservoir.z*0.01));
	//float count = 0;
	const int NUM_SAMPLES = 4;
	float weight = 1;

	for(int i = NUM_SAMPLES; i >= 0; i--){
		ivec2 randUV = get_random_uv(seed, radius);//ivec2(jit_in.uv + radius*2*(vec2(RandomFloat01(seed), RandomFloat01(seed))-0.5));
		vec4 reservoir = texelFetch(reservoirTex, randUV);
		test_s = get_sample(int(reservoir.y));
		float angle_diff = dot(this_s.nor, texelFetch(norDepthTex, randUV).xyz);
		float sample_depth = texelFetch(norDepthTex, randUV).w;
		if(angle_diff < 0) continue;
		//if(this_s.id != test_s.id) continue;
		if(visible(this_s, test_s, seed)){
			float this_weight = angle_diff * saturate((1 - 200*abs(this_s.depth - sample_depth)));
			vec3 radiance = get_radiance(this_s, test_s) * this_weight;// * max(0.5, dot(test_s.nor, this_s.nor));
			//float p_hat = length(radiance);
			float p_hat = luminance(radiance);
			reservoir.w = p_hat > 0 ? (1/max(0.0001, p_hat)) * (reservoir.x / max(reservoir.z, 0.0001)) : 0.0;
			radiance *= reservoir.w;
			outColor.rgb += radiance;
			weight += this_weight;
		}
	}

	outColor.rgb /= weight;

	//outColor.rgb = texelFetch(norDepthTex, ivec2(jit_in.uv)).rgb;
	//outColor.rgb = vec3(dot(this_s.nor, test_s.nor));

}
]]>
</program>
</language>
</jittershader>
