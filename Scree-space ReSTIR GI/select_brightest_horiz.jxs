<jittershader name="default">
	<description>Default Slab </description>
	<param name="dummy" type="int" default="0" />
	<param name="tex0" type="int" default="1" />
	<param name="MVP" type="mat4" state="MODELVIEW_PROJECTION_MATRIX" />
	<param name="textureMatrix0" type="mat4" state="TEXTURE0_MATRIX" />
	<param name="pos" type="vec3" state="POSITION" />
	<param name="uv" type="vec2" state="TEXCOORD" />
	<param name="frame" type="int" state="FRAME" />
	<language name="glsl" version="1.5">
		<bind param="dummy" program="fp" />
		<bind param="tex0" program="fp" />
		<bind param="MVP" program="vp" />
		<bind param="textureMatrix0" program="vp" />
		<bind param="pos" program="vp" />
		<bind param="uv" program="vp" />
		<bind param="frame" program="fp" />

		<include source="noise_functions.glsl" program="fp" />

		<program name="vp" type="vertex"  >
<![CDATA[
#version 330 core

in vec3 pos;
in vec2 uv;
out jit_PerVertex {
	vec2 uv;
} jit_out;
uniform mat4 MVP;
uniform mat4 textureMatrix0;

void main(void) {
	gl_Position = MVP*vec4(pos, 1.);
	jit_out.uv = vec2(textureMatrix0*vec4(uv, 0., 1.));
}
]]>
</program>

<program name="fp" type="fragment"  >
<![CDATA[
#version 330 core

in jit_PerVertex {
	vec2 uv;
} jit_in;
layout (location = 0) out vec4 outColor;

uniform sampler2DRect dummy, tex0;
uniform int frame;


void main(void) {

	vec3 uv_luma0 = texelFetch(tex0, ivec2(jit_in.uv.x*2, jit_in.uv.y)).rgb;
	vec3 uv_luma1 = texelFetch(tex0, ivec2(jit_in.uv.x*2 + 1, jit_in.uv.y)).rgb;
	outColor.rgb = uv_luma0.z >= uv_luma1.z ? uv_luma0 : uv_luma1;
	outColor.a = 1;

}
]]>
</program>
	</language>
</jittershader>
