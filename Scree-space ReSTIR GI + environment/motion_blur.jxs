<jittershader name="default">
	<description>Default Slab </description>
	<param name="imgTex" type="int" default="0" />
	<param name="velTex" type="int" default="1" />
	<param name="depthTex" type="int" default="2" />
	<param name="STBN_tiledTex" type="int" default="3" />
	<texture file="stbn_uvec2_null_scalar_tiled.png" type="float16" unit="3" rectangle="1" filter="none none" wrap="repeat repeat"/>
	<param name="MVP" type="mat4" state="MODELVIEW_PROJECTION_MATRIX" />
	<param name="textureMatrix0" type="mat4" state="TEXTURE0_MATRIX" />
	<param name="pos" type="vec3" state="POSITION" />
	<param name="texcoord" type="vec2" state="TEXCOORD" />
	<param name="texDim" type="vec2" state="TEXDIM0" />
	<param name="delta" type="float" state="DELTA_TIME" />
	<param name="frame" type="int" state="FRAME" />
	<param name="farClip" type="float" state="FAR_CLIP" />
	<language name="glsl" version="1.5">
		<bind param="imgTex" program="fp" />
		<bind param="velTex" program="fp" />
		<bind param="depthTex" program="fp" />
		<bind param="STBN_tiledTex" program="fp" />
		<bind param="MVP" program="vp" />
		<bind param="textureMatrix0" program="vp" />
		<bind param="pos" program="vp" />
		<bind param="texcoord" program="vp" />
		<bind param="texDim" program="fp" />
		<bind param="delta" program="vp" />
		<bind param="frame" program="fp" />
		<bind param="farClip" program="fp" />
		<program name="vp" type="vertex"  >
		<![CDATA[
			#version 330 core
			
			in vec3 pos;
			in vec2 texcoord;

			out jit_PerVertex {
				vec2 texcoord;
				flat float vel_amt;
			} jit_out;
			uniform mat4 MVP;
			uniform mat4 textureMatrix0;
			uniform float delta;
			
			void main(void) {
				gl_Position = MVP*vec4(pos, 1.);
				float fps = 1/delta;
				float target_fps = 40;
				jit_out.vel_amt = fps / target_fps;
				jit_out.texcoord = vec2(textureMatrix0*vec4(texcoord, 0., 1.));
			}
		]]>
		</program>
		
		<program name="fp" type="fragment"  >
		<![CDATA[
			#version 330 core
			
			in jit_PerVertex {
				vec2 texcoord;
				flat float vel_amt;
			} jit_in;
			layout (location = 0) out vec4 outColor;
			
			uniform sampler2DRect imgTex, velTex, depthTex, STBN_tiledTex;
			uniform vec2 texDim;
			uniform float farClip;
			uniform int frame;

			void main(void) {

				ivec2 iuv =  ivec2(jit_in.texcoord);
				vec2 vel = texelFetch(velTex,iuv).xy;
				vec2 vel_rect = vel * jit_in.vel_amt * texDim;

				vec3 col = texelFetch(imgTex, iuv).rgb;
				float this_depth = texelFetch(depthTex, iuv).w;

				//vec2 texel_size = 1 / texDim;
				float speed = length(vel_rect);
				const int MAX_SAMPLES = 5;
   				int nSamples = clamp(int(speed), 1, MAX_SAMPLES);
   				float tot_weight = 1;

   				for (int i = nSamples - 1; i >= 1; i--) {

   					float tile_select = float(mod(i + frame*nSamples, 63)) + 1;
					vec2 tile_uv = 128*vec2(mod(tile_select, 8), floor(tile_select*0.125));
					float rand = texelFetch(STBN_tiledTex, ivec2(mod(jit_in.texcoord, vec2(128)) + tile_uv)).w - 0.5;

      				vec2 uv = floor(jit_in.texcoord + vel_rect * rand);
      				float test_depth = texture(depthTex, uv).w;
      				float weight = clamp(farClip*(test_depth - this_depth) + 2, 0.0, 1.0);
      				col += texture(imgTex, uv).rgb * weight;// * max(0.001, (1 - abs(rand*2)));
      				tot_weight += weight;
   				}
   				col /= max(1, tot_weight);

				outColor = vec4(col, 1);


			}
		]]>
		</program>
	</language>
</jittershader>
