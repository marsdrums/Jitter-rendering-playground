<jittershader name="default">
	<description>Default Slab </description>
	<param name="imgTex" type="int" default="0" />
	<param name="velTex" type="int" default="1" filter="nearest" />
	<param name="accumTex" type="int" default="2" filter="nearest" />
	<param name="texDim" type="vec2" state="TEXDIM0" />
	<param name="MVP" type="mat4" state="MODELVIEW_PROJECTION_MATRIX" />
	<param name="textureMatrix0" type="mat4" state="TEXTURE0_MATRIX" />
	<param name="pos" type="vec3" state="POSITION" />
	<param name="uv" type="vec2" state="TEXCOORD" />
	<param name="invV" type="mat4" state="VIEW_MATRIX" transform="INVERSE" />
	<param name="variance_clipping_gamma" type="float" default="1" />
	<language name="glsl" version="1.5">
		<bind param="imgTex" program="fp" />
		<bind param="velTex" program="fp" />
		<bind param="accumTex" program="fp" />
		<bind param="texDim" program="fp" />
		<bind param="MVP" program="vp" />
		<bind param="textureMatrix0" program="vp" />
		<bind param="pos" program="vp" />
		<bind param="uv" program="vp" />
		<bind param="invV" program="fp" />
		<bind param="variance_clipping_gamma" program="fp" />
		<program name="vp" type="vertex"  >
<![CDATA[
#version 330 core

in vec3 pos;
in vec2 uv;
out jit_PerVertex {
	smooth vec2 uv;
} jit_out;
uniform mat4 MVP;
uniform mat4 textureMatrix0;

void main(void) {

	gl_Position = MVP*vec4(pos, 1.);
	jit_out.uv = vec2(textureMatrix0*vec4(uv, 0., 1.));
}
]]>

</program>
<program name="fp" type="fragment"  >

<![CDATA[
#version 330 core
uniform sampler2DRect imgTex, velTex, accumTex;
uniform mat4 invV;
uniform vec2 texDim;
uniform float variance_clipping_gamma;

in jit_PerVertex {
	smooth vec2 uv;
} jit_in;

struct curr{
	vec3 col;
	vec2 vel;
	vec2 repUV;
};

struct prev{
	vec3 col;
};

layout (location = 0) out vec4 outCol;
//layout (location = 1) out vec4 outTest;

curr read_current_textures(){
	curr c;
	c.col = texelFetch(imgTex, ivec2(jit_in.uv)).rgb;
	c.vel = texelFetch(velTex, ivec2(jit_in.uv)).rg;
	c.repUV = jit_in.uv - c.vel*texDim;
	return c;
}

bool valid_reprojection(curr c){

	return(c.repUV.x >= 0 && c.repUV.y >= 0 && c.repUV.x < texDim.x && c.repUV.y < texDim.y);
}

void calc_reprojection(inout curr c, inout prev p){

	//if(c.depth == 1) return;
	p.col = valid_reprojection(c) ? texture(accumTex, c.repUV).rgb : c.col;
	
}

float saturate(in float x){ return max(0.0, min(1.0, x)); }

void main(void) {

	curr c = read_current_textures();

	//if(c.depth == 1){
	//	outCol = vec4(0.0);
	//	return;
	//}
	prev p;

	calc_reprojection(c, p);

	vec3 test_color;
	vec3 curr_col_blurred = c.col*0.2560;

	//gaussian kernel
    // 0.0947, 0.1550, 0.0947,
    // 0.1550, 0.2560, 0.1550,
    // 0.0947, 0.1550, 0.0947

	//COLOR CLIPPING
	
	vec3 NearColor0 = texelFetch(imgTex, ivec2(jit_in.uv) + ivec2(1, 0)).rgb;
	vec3 NearColor1 = texelFetch(imgTex, ivec2(jit_in.uv) + ivec2(0, 1)).rgb;
	vec3 NearColor2 = texelFetch(imgTex, ivec2(jit_in.uv) + ivec2(-1, 0)).rgb;
	vec3 NearColor3 = texelFetch(imgTex, ivec2(jit_in.uv) + ivec2(0, -1)).rgb;
	
	// Compute the two moments
	vec3 M1 = c.col + NearColor0 + NearColor1 + NearColor2 + NearColor3;
	vec3 M2 = c.col * c.col + NearColor0 * NearColor0 + NearColor1 * NearColor1 
		+ NearColor2 * NearColor2 + NearColor3 * NearColor3;
	
	vec3 MU = M1 / 5.0;
	vec3 Sigma = sqrt(M2 / 5.0 - MU * MU);
	
	vec3 BoxMin = MU - variance_clipping_gamma * Sigma;
	vec3 BoxMax = MU + variance_clipping_gamma * Sigma;

	p.col = clamp(p.col, BoxMin, BoxMax); 

/*
	vec3 minColor = vec3(9999.0); 
	vec3 maxColor = vec3(-9999.0);
	test_color = texelFetch(imgTex, ivec2(jit_in.uv) + ivec2(-1,-1)).rgb;
	curr_col_blurred += test_color*0.0947;
	minColor = min(minColor, test_color); maxColor = max(maxColor, test_color);
	test_color = texelFetch(imgTex, ivec2(jit_in.uv) + ivec2(0,-1)).rgb;
	curr_col_blurred += test_color*0.1550;
	minColor = min(minColor, test_color); maxColor = max(maxColor, test_color);
	test_color = texelFetch(imgTex, ivec2(jit_in.uv) + ivec2(+1,-1)).rgb;
	curr_col_blurred += test_color*0.0947;
	minColor = min(minColor, test_color); maxColor = max(maxColor, test_color);
	test_color = texelFetch(imgTex, ivec2(jit_in.uv) + ivec2(-1,0)).rgb;
	curr_col_blurred += test_color*0.1550;
	minColor = min(minColor, test_color); maxColor = max(maxColor, test_color);
	test_color = texelFetch(imgTex, ivec2(jit_in.uv) + ivec2(+1,0)).rgb;
	curr_col_blurred += test_color*0.1550;
	minColor = min(minColor, test_color); maxColor = max(maxColor, test_color);
	test_color = texelFetch(imgTex, ivec2(jit_in.uv) + ivec2(-1,+1)).rgb;
	curr_col_blurred += test_color*0.0947;
	minColor = min(minColor, test_color); maxColor = max(maxColor, test_color);
	test_color = texelFetch(imgTex, ivec2(jit_in.uv) + ivec2(0,+1)).rgb;
	curr_col_blurred += test_color*0.1550;
	minColor = min(minColor, test_color); maxColor = max(maxColor, test_color);
	test_color = texelFetch(imgTex, ivec2(jit_in.uv) + ivec2(+1,+1)).rgb;
	curr_col_blurred += test_color*0.0947;
	minColor = min(minColor, test_color); maxColor = max(maxColor, test_color);
	

	float hist = texelFetch(accumTex, ivec2(c.repUV)).w;

	// Clamp previous color to min/max bounding box
	//p.col = clamp(p.col, minColor, maxColor);	 

	vec2 prev_vel = texture(velTex, c.repUV).ba;
	//vec2 prev_vel = texture(velTex, jit_in.uv).ba;
	float vel_diff = length( prev_vel - c.vel );
	float weight = saturate( (vel_diff - 0.001)*10 );
	hist *= 1 - saturate(weight*10);
	//if(weight > 0.1){
	//	hist = 0;
	//} 

	vec3 accumulated_col = mix( p.col, c.col,  max(0.1, 1 / (hist+1)) );//0.1*c.col + 0.9*p.col;
	//vec3 accumulated_col = 0.1*c.col + 0.9*p.col;
	//outCol.rgb = mix(accumulated_col, curr_col_blurred, weight);
	//outCol.rgb = mix(accumulated_col, c.col, min(1.0, weight*200));
*/
	outCol.rgb = p.col;
	//outCol.rgb = mix(accumulated_col, curr_col_blurred, min(1.0, weight*200));
	//hist += 1;
	//hist *= saturate(1 - weight);
	//hist = weight > 0.4 ? 0 : hist;
	outCol.a = 1;

}
]]>
</program>
</language>
</jittershader>
