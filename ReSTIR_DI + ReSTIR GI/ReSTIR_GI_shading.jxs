<jittershader name="fill-flat-quads">
	<description>Default Shader </description>
	<param name="pos" type="vec3" state="POSITION" />
	<param name="objTex" type="int" default="0" />
	<param name="posTex" type="int" default="1" />
	<param name="norTex" type="int" default="2" />
	<param name="albTex" type="int" default="3" />
	<param name="reservoirTex" type="int" default="4" />
	<param name="sampleTex0" type="int" default="5" />
	<param name="sampleTex1" type="int" default="6" />
	<param name="sampleTex2" type="int" default="7" />
	<param name="viewPort" type="vec2" state="VIEWPORT" />
 	<param name="objNum" type="vec2" state="TEXDIM0" />
  	<param name="texDim" type="vec2" state="TEXDIM1" />
 	<param name="eye" type="vec3" state="CAMERA_POSITION" />
 	<param name="frame" type="int" state="FRAME" />
 	<param name="MVP" type="mat4" state="MODELVIEW_PROJECTION_MATRIX" />
 	<param name="prevMVP" type="mat4" state="PREV_MODELVIEW_PROJECTION_MATRIX" />
 	<param name="light_pos" type="vec3" default="0. 1.9 0." />
 	<param name="light_dir" type="vec3" default="0. -1. 0." />
	<language name="glsl" version="1.5">
		<bind param="pos" program="vp" />
		<bind param="objTex" program="fp" />
		<bind param="posTex" program="fp" />
		<bind param="norTex" program="fp" />
		<bind param="albTex" program="fp" />
		<bind param="reservoirTex" program="fp" />
		<bind param="sampleTex0" program="fp" />
		<bind param="sampleTex1" program="fp" />
		<bind param="sampleTex2" program="fp" />
		<bind param="viewPort" program="fp" />
		<bind param="objNum" program="fp" />
		<bind param="texDim" program="fp" />
		<bind param="texDim" program="vp" />
		<bind param="eye" program="fp" />
		<bind param="frame" program="fp" />
		<bind param="MVP" program="fp" />
		<bind param="prevMVP" program="fp" />
		<bind param="light_pos" program="fp" />
		<bind param="light_dir" program="fp" />
		<program name="vp" type="vertex">
<![CDATA[
#version 330 core
in vec3 pos;
uniform vec2 texDim;

out jit_PerVertex {
	smooth vec2 uv;	
} jit_out;

void main() {	
	gl_Position = vec4(pos.xy,0,1);	
	jit_out.uv = (pos.xy * vec2(0.5, -0.5) + 0.5)*texDim;
}
]]>
		</program>
		<program name="fp" type="fragment">
<![CDATA[
#version 330 core
#define FAR 100000
#define BACKGROUND vec3(0)
#define M_1_PI 0.318309886183790671538
#define M_PI 3.14159265358979323846264338327950288

uniform sampler2DRect objTex, posTex, norTex, albTex, reservoirTex, sampleTex0, sampleTex1, sampleTex2;
uniform vec2 objNum, texDim, viewPort;
uniform vec3 eye;
uniform int frame;
uniform mat4 MVP, prevMVP;
uniform float num_lights;
uniform vec3 light_pos, light_dir;

in jit_PerVertex {
	smooth vec2 uv;	
} jit_in;

out vec4 color;

struct rayInfo{
	vec3 o;
	vec3 d;
};

struct rayNextInfo{
	vec3 o;
	vec3 d;
};

struct hitInfo{
	float tn; //enter distance
	float tf; //exit distance
	vec3 t1;
	vec3 t2;
	vec3 n; //normal
	vec3 p; //position
	mat4 txi;
	vec3 rdd;
	vec3 roo;
};

struct objInfo{
	vec3 p; //position
	vec3 s; //scale
	vec4 r; //rotation
	mat4 txx; 
	mat4 txi;
};

struct bestInfo{
	float tn; //enter distance
	float tf; //exit distance
	vec3 t1;
	vec3 t2;
	vec3 n; //normal
	vec3 p; //position
	vec4 c; //color
	float i;
	mat4 txi;
	vec3 rdd;
	vec3 roo;
};

struct searchInfo{
	vec3 tru;
	vec3 finalColor;
	uint seed;
	float cosine;
};

struct firstHitInfo{
	vec3 L;
	vec3 x_v;
	vec3 x_n;
	vec3 s_v;
	vec3 s_n;
};

#define OCTAVES 6.
#define PI 3.14159265359
#define INV_PI 0.3183098862
#define TWOPI 6.28318530718 
#define MAX_BOUNCES 3
#define light_color vec3(10., 10., 10.)
#define light_size 0.5

uint wang_hash(inout uint seed){

    seed = uint(seed ^ uint(61)) ^ uint(seed >> uint(16));
    seed *= uint(9);
    seed = seed ^ (seed >> 4);
    seed *= uint(0x27d4eb2d);
    seed = seed ^ (seed >> 15);
    return seed;
}
 
float RandomFloat01(inout uint seed) { 
	return float(wang_hash(seed)) / 4294967296.0; 
}

vec2 RandomVec201(inout uint seed) { 
	return vec2( 	RandomFloat01(seed),
					RandomFloat01(seed)); 
}

vec3 RandomVec301(inout uint seed) { 
	return vec3( 	RandomFloat01(seed),
					RandomFloat01(seed),
					RandomFloat01(seed)); 
}

vec4 RandomVec401(inout uint seed) { 
	return vec4( 	RandomFloat01(seed),
					RandomFloat01(seed),
					RandomFloat01(seed),
					RandomFloat01(seed)); 
}

vec2 randomUnitVector2(inout uint seed){

    float a = RandomFloat01(seed) * TWOPI;
    return vec2( cos(a), sin(a) );
}

vec3 randomUnitVector3(inout uint seed){

    float z = RandomFloat01(seed) * 2.0f - 1.0f;
    float a = RandomFloat01(seed) * TWOPI;
    float r = sqrt(1.0f - z * z);
    float x = r * cos(a);
    float y = r * sin(a);
    return vec3(x, y, z);
}

mat4 rotationAxisAngle( vec3 v, float angle ){
    float s = sin( angle );
    float c = cos( angle );
    float ic = 1.0 - c;

    return mat4( v.x*v.x*ic + c,     v.y*v.x*ic - s*v.z, v.z*v.x*ic + s*v.y, 0.0,
                 v.x*v.y*ic + s*v.z, v.y*v.y*ic + c,     v.z*v.y*ic - s*v.x, 0.0,
                 v.x*v.z*ic - s*v.y, v.y*v.z*ic + s*v.x, v.z*v.z*ic + c,     0.0,
			     0.0,                0.0,                0.0,                1.0 );
}

mat4 translate( float x, float y, float z ){
    return mat4( 1.0, 0.0, 0.0, 0.0,
				 0.0, 1.0, 0.0, 0.0,
				 0.0, 0.0, 1.0, 0.0,
				 x,   y,   z,   1.0 );
}

// axis aligned box centered at the origin, with size boxSize
float box_intersection_shadow(vec3 ro, vec3 rd, in objInfo obj ) {
    //vec3 n = ray.invd*ray.o;   // can precompute if traversing a set of aligned boxes
    // convert from ray to box space
	vec3 rdd = (obj.txx*vec4(rd,0.0)).xyz;
	vec3 roo = (obj.txx*vec4(ro,1.0)).xyz;

	// ray-box intersection in box space
    vec3 m = 1.0/rdd;
    vec3 n = m*roo;
    vec3 k = abs(m)*obj.s;
    vec3 t1 = -n - k;
    vec3 t2 = -n + k;
    float tn = max( max( t1.x, t1.y ), t1.z );
    float tf = min( min( t2.x, t2.y ), t2.z );
    if((tn <= tf) && (tf >= 0.0)) return tn;
    return FAR;
    //if( hit.tn > hit.tf || hit.tf < 0.0) return false; // no intersection
    //return true;
}

// axis aligned box centered at the origin, with size boxSize
bool box_intersection( in rayInfo ray, out hitInfo hit, in objInfo obj ) {
    //vec3 n = ray.invd*ray.o;   // can precompute if traversing a set of aligned boxes
    // convert from ray to box space
	hit.rdd = (obj.txx*vec4(ray.d,0.0)).xyz;
	hit.roo = (obj.txx*vec4(ray.o,1.0)).xyz;

	// ray-box intersection in box space
    vec3 m = 1.0/hit.rdd;
    vec3 n = m*hit.roo;
    vec3 k = abs(m)*obj.s;
    hit.t1 = -n - k;
    hit.t2 = -n + k;
    hit.tn = max( max( hit.t1.x, hit.t1.y ), hit.t1.z );
    hit.tf = min( min( hit.t2.x, hit.t2.y ), hit.t2.z );
    hit.txi = obj.txi; //this could be better
    return (hit.tn <= hit.tf) && (hit.tf >= 0.0);
    //if( hit.tn > hit.tf || hit.tf < 0.0) return false; // no intersection
    //return true;
}

void get_obj_info(out objInfo obj, in float i){
	obj.p = texture(objTex, vec2(i, 0.5)).xyz;
	obj.r = texture(objTex, vec2(i, 1.5));
	obj.s = texture(objTex, vec2(i, 2.5)).xyz;

    // rotate and translate box	
	mat4 rot = rotationAxisAngle( normalize(obj.r.xyz), obj.r.w );
	mat4 tra = translate( obj.p.x, obj.p.y, obj.p.z );
	obj.txi = tra * rot; 
	obj.txx = inverse( obj.txi );
}

void update_best(inout bestInfo bes, in hitInfo hit, in float i){

	if(bes.tn < hit.tn) return;

	bes.tn = hit.tn;
	bes.tf = hit.tf;
	bes.t1 = hit.t1;
	bes.t2 = hit.t2;
	bes.txi = hit.txi;
	bes.rdd = hit.rdd;
	bes.i = i;
}

void get_normal_position_color(inout bestInfo bes, in rayInfo ray){

	bes.c = texture(objTex, vec2(bes.i, 3.5));
	bes.p = ray.o + ray.d*bes.tn; //to avoid landing exactly on the surface
    bes.n = (bes.tn > 0.0) ?	step(vec3(bes.tn),bes.t1) : // ro ouside the box
                           		step(bes.t2,vec3(bes.tf));  // ro inside the box
    bes.n = (bes.txi * vec4(-sign(bes.rdd)*bes.n,0.0)).xyz;
    bes.p += bes.n * 0.01;
    //bes.n *= -sign(ray.d);
}

void update_color(in bestInfo bes, inout searchInfo sea){

	sea.finalColor += max(vec3(0), bes.c.rgb - 1)*sea.tru; //use albedo above 1 as emitter
	sea.tru *= min(vec3(1), bes.c.rgb)*sea.cosine;
}

void update_ray(inout rayInfo ray, in bestInfo bes, inout searchInfo sea){

	ray.o = bes.p;
	ray.d = normalize(bes.n + randomUnitVector3(sea.seed));
	//ray.d *= dot(ray.d, bes.n) > 0.0 ? 1 : -1;
	ray.o += ray.d * 1e-5;
	sea.cosine = dot(ray.d, bes.n);
}

bool shadow_ray(vec3 ro, vec3 dir, float dist){

	objInfo obj;

	for(float i = objNum.x-0.5; i >= 0.0; i-=1.0){
		get_obj_info(obj, i);
		if(box_intersection_shadow(ro, dir, obj) < dist-0.6) return false;
	}

	return true;
}
/*
void get_direct_light(in rayInfo ray, in bestInfo bes, inout searchInfo sea, inout objInfo obj){

	vec3 point_on_light = (RandomFloat01(sea.seed)*2 - 1)*vec3(light_size, 0., light_size) + light_pos;
	//insert light direction rejection
	vec3 diff = point_on_light - ray.o;
	float dist2 = dot(diff, diff);
	float dist = sqrt(dist2);
	vec3 dir = diff / dist;

	float G = max(0.0, dot(bes.n, diff)) / dist2;
	if(G > 0.0){

		float light_pdf = 1 / (light_size * G);
		float brdf_pdf = INV_PI;
		float w = light_pdf / (light_pdf + brdf_pdf);
		vec3 brdf = bes.c.rgb / PI;
		if(shadow_ray(ray.o + dir*1e-5, dir, dist, obj)){
			vec3 Le = light_color; //*** substitute the fixed light color with the index of an emitting object
			sea.finalColor += sea.tru * (Le * w * brdf) / light_pdf;
		}
	}
}

void raytrace( vec3 pos, vec3 nor, vec4 alb , inout searchInfo sea, inout firstHitInfo fhi) {

	objInfo obj;
	hitInfo hit;
	rayInfo ray;
	rayNextInfo rayNext;
	bestInfo bes;

	sea.tru = alb.rgb;
	sea.finalColor = vec3(0);

	ray.o = fhi.x_v;

	bes.n = fhi.x_n;
	bes.c = alb;


	sea.cosine = dot(ray.d, nor);


	for(int s = 0; s < MAX_BOUNCES; s++){

		//if(s > 0){ //remove comment to skip direct lighting

			// NEE
			get_direct_light(ray, bes, sea, obj);		
		//}


		//BRDF
		ray.d = normalize(nor + randomUnitVector3(sea.seed));
		//ray.d *= dot(ray.d, nor) > 0.0 ? 1 : -1;
		ray.o += ray.d*0.002;

		vec3 brdf = bes.c.rgb / PI;

		bes.tn = FAR;

		//find closest hit
		for(float i = objNum.x-0.5; i >= 0.0; i-=1.0){
			get_obj_info(obj, i);
			if(box_intersection(ray, hit, obj)){
				update_best(bes, hit, i);
			}
		}

		//if missed return
		if(bes.tn == FAR) return;

		//get hit info
		get_normal_position_color(bes, ray);

		float brdf_pdf = INV_PI;

		//if the ray hit a light
		if(bes.c.a > 0.0){
			float G = max(0.0, dot(ray.d, bes.n)) / (bes.tn*bes.tn);
			if(G <= 0.0) break;

			float light_pdf = 1 / (light_size * G);
			float w = brdf_pdf / (light_pdf + brdf_pdf);
			vec3 Le = bes.c.rgb*bes.c.a;
			sea.finalColor += sea.tru * (Le * w * brdf) / brdf_pdf;
		}

		if(s == 0){ //if it's the first bounce
			fhi.s_v = bes.p;
			fhi.s_n = bes.n;
		}

		sea.tru *= brdf / brdf_pdf;
		//update_color(bes, sea);

		update_ray(ray, bes, sea);

	}
}
*/

void main() {

	vec3 pos = texture(posTex, jit_in.uv).xyz;
	vec3 nor = texture(norTex, jit_in.uv).xyz;
	vec3 alb = texture(albTex, jit_in.uv).xyz;
	vec4 reservoir = texture(reservoirTex, jit_in.uv);
	vec3 Lo = texture(sampleTex0, jit_in.uv).rgb;
	vec3 s_p = texture(sampleTex1, jit_in.uv).xyz;
	//vec3 s_n = texture(sampleTex2, jit_in.uv).xyz;

	vec3 ro = pos;
	vec3 diff = s_p - pos;
	float dist = length(diff);
	vec3 rd = diff / dist;
	ro += rd * 0.001;
	bool visible = shadow_ray(ro, rd, dist);
	vec3 res = vec3(0);

	if(visible && reservoir.w > 0.0){
		res = alb * Lo * max( 0.0, dot( nor, rd ) ) * reservoir.w;
	} 

	color = vec4(res, 1);

	//color[3] = vec4(r.x_s, float(mat_idx));
	//color[4] = vec4(r.n_s, 0.0);
	//color[5] = vec4(r.L_o, 0.0);
	//color[6] = vec4(f, 0.0);

	//vec3 x_v;
	//float p_q;
	//vec3 n_v;
	//uint bsdf_props;
	//vec3 x_s;
	//uint mat_idx;
	//vec3 n_s;
	//vec3 L_o;
	//vec3 f;

}	
]]>
		</program>
	</language>
</jittershader>
